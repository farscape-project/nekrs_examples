//
// nekRS User Defined File
//
#include "udf.hpp"

static dfloat R_PIPE;
static dfloat U_INFLOW;
static dfloat P_OUTLET;
static dfloat C_X0;
static dfloat C_Y0;
static dfloat YP_TIME;
static int YP_INTERVAL;

#ifdef __okl__

#include "../pipe.oudf"

#endif

// run userchk at certain timesteps
void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
  // get y1+ values every YP_INTERVAL timesteps

  if ((tstep%YP_INTERVAL)==0){
    nek::ocopyToNek(time, tstep);
    nek::userchk();
  }

  // get y1+ values every YP_TIME timesteps

  static float lastPrintTime = -1.0f; // Initialize to an impossible time for the first call
  float currentTarget = std::floor(time / YP_TIME) * YP_TIME; // Find the closest multiple of YP_TIME below or equal to the current time

  if (lastPrintTime < currentTarget) { // Check if we have crossed a multiple of YP_TIME since last print
    nek::userchk();
    nek::ocopyToNek(time, tstep);
    lastPrintTime = currentTarget; // Update last print time to the current target
  }
}

void UDF_LoadKernels(occa::properties& kernelInfo)
{
  kernelInfo["defines/rPipe"]		= R_PIPE;
  kernelInfo["defines/uInflow"]	= U_INFLOW;
  kernelInfo["defines/cx0"]			= C_X0;
  kernelInfo["defines/cy0"]			= C_Y0;
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  platform->par->extract("casedata","r_pipe",R_PIPE);
  platform->par->extract("casedata","u_inflow",U_INFLOW);
  platform->par->extract("casedata","c_x0",C_X0);
  platform->par->extract("casedata","c_y0",C_Y0);
  platform->par->extract("casedata","yp_interval",YP_INTERVAL);
  platform->par->extract("casedata","yp_time",YP_TIME);
}

void UDF_Setup(nrs_t* nrs)
{
}
